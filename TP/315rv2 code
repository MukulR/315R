#include "main.h"
#include "motordefs.hpp"


void drive(void *param){   
    pros::Controller master(pros::E_CONTROLLER_MASTER);
    while(true){
		int forward = master.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y);
		int turn = master.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_X);
		int leftMtrVals = forward + turn;
		int rightMtrVals = -(forward + turn);
		left_mtr_b.move(leftMtrVals);
		left_mtr_f.move(leftMtrVals);
		right_mtr_b.move(rightMtrVals);
		right_mtr_f.move(rightMtrVals);
		//delay
        pros::Task::delay(10);
    }
}

void catapult(void* param){
    while(true){
        if(pros::E_CONTROLLER_DIGITAL_R2 == 1){
            while(pros::E_CONTROLLER_DIGITAL_R2 == 1){
                catapult_mtr.move(127);
            }
            catapult_mtr.move(0);
        }
        pros::Task::delay(10);
    }            
}

void intake(void* param){
    while(true){
        if(pros::E_CONTROLLER_DIGITAL_R1 == 1){
            while(pros::E_CONTROLLER_DIGITAL_R1 == 1){
                intake_mtr.move(127);
            }
            intake_mtr.move(0);
        }
        pros::Task::delay(10);
    }
}       

void brake(void* param){
	while(true){
		if(pros::E_CONTROLLER_DIGITAL_L1 == 1){
			while(pros::E_CONTROLLER_DIGITAL_L1){
				brake_mtr.move(127);
			}
		}
	}
}



/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */

//task starter function (called by competition)
void opcontrol() {
	pros::Task driveTask(drive);
	pros::Task catapultTask(catapult);
	pros::Task intakeTassk(intake);
}

